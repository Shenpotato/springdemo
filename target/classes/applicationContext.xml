<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!--
        配置bean,通过setter（）方法实现
        class：bean的全类名，通过反射的方式在IOC容器中创建Bean,所以要求Bean中必须有无参构造函数
        id:标识容器中的bean，id唯一
    -->
    <bean id = "helloWorld" class="com.shenpotato.springdemo.HelloWorld">
        <property name="name" value="shenpotato"></property>
    </bean>

    <!--
        通过构造方法来配置Bean的属性
    -->
    <bean id = "car" class="com.shenpotato.springdemo.Car">
        <constructor-arg value="Audi" type="java.lang.String"></constructor-arg>
        <constructor-arg type="java.lang.String">
            <!--如果字面值包含特殊字符，可用<![CDATA[]]>包括起来-->
            <!--属性值可以使用value子节点进行配置-->
            <value><![CDATA[<ShangHai^>]]></value>
        </constructor-arg>
        <constructor-arg value="300000" type="double"></constructor-arg>
        <constructor-arg  type="int">
            <value>250</value>
        </constructor-arg>
    </bean>
    <!--使用构造器注入属性值时可指定参数的位置和参数的类型用以区分重载构造器-->
    <bean id = "car2" class="com.shenpotato.springdemo.Car">
        <constructor-arg value="BMW" type="java.lang.String"></constructor-arg>
        <constructor-arg value="ChongQing" type="java.lang.String"></constructor-arg>
        <constructor-arg value="300" index="3" ></constructor-arg>
        <constructor-arg value="500000" index="2"></constructor-arg>
    </bean>


    <bean id ="person" class="com.shenpotato.springdemo.Person">
        <property name="name" value="Shenpotato"></property>
        <property name="age" value="20"></property>
        <!--引用的不同方式-->
        <!--外部Bean的引用，通过ref属性或ref子节点-->
        <!-- 通过ref属性
        <property name="car" ref="car"></property>
        -->
        <!--通过ref子节点
        <property name="car">
            <ref bean="car2"></ref>
        </property>
        -->
        <!--内部Bean引用-->
        <property name="car">
            <bean class="com.shenpotato.springdemo.Car">
                <constructor-arg value="Ford"></constructor-arg>
                <constructor-arg value="XiaMen"></constructor-arg>
                <constructor-arg value="100000"></constructor-arg>
                <constructor-arg value="220"></constructor-arg>
            </bean>
        </property>
    </bean>

    <!-- List的使用-->
    <bean id ="person2" class="com.shenpotato.springdemo.Person">
        <property name="name" value="Tom"></property>
        <property name="age" value="21"></property>
        <property name="car" >
            <!--使用List节点为List属性赋值-->
            <list>
                <ref bean="car"></ref>
                <ref bean="car2"></ref>
            </list>
        </property>
    </bean>

    <!-- map的使用 -->
    <bean id = "newPerson" class="com.shenpotato.springdemo.NewPerson">
        <constructor-arg value="Joe" index="0"></constructor-arg>
        <constructor-arg value="22" index="1"></constructor-arg>
        <constructor-arg index="2">
            <map>
                <entry key="FirstCar" value-ref="car"></entry>
                <entry key="SecondCar" value-ref="car2"></entry>
            </map>
        </constructor-arg>
    </bean>

    <!-- properties的使用-->
    <bean id ="dataSource" class="com.shenpotato.springdemo.DataSource">
        <property name="properties">
            <props>
                <prop key="username">Shentaotao</prop>
                <prop key="password">123456</prop>
            </props>
        </property>
    </bean>

    <!--配置单例的集合Bean,以供过个bean进行引用，需要导入util 命名空间-->
    <util:list id ="cars">
        <ref bean ="car"/>
        <ref bean="car2"/>
    </util:list>

    <bean id ="person3" class="com.shenpotato.springdemo.Person">
        <property name="name" value="Rose"></property>
        <property name="age" value="24"></property>
        <property name="car" ref = "cars"></property>
    </bean>

    <!--通过p命名空间简化Bean的配置-->
    <bean id ="person4" class="com.shenpotato.springdemo.Person" p:name="Mike"
          p:age="26" p:car-ref="cars"></bean>
</beans>